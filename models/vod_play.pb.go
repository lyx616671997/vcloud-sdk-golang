// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: vod_play.proto

package models

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VodGetPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid        string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`               // 视频ID
	Format     string `protobuf:"bytes,2,opt,name=Format,proto3" json:"Format,omitempty"`         //封装格式，支持mp4,dash,hls，默认mp4 Format
	Codec      string `protobuf:"bytes,3,opt,name=Codec,proto3" json:"Codec,omitempty"`           //编码类型，默认h264，可选值为h264,h265等 Codec
	Definition string `protobuf:"bytes,4,opt,name=Definition,proto3" json:"Definition,omitempty"` //视频流清晰度，默认返回全部，支持：240p，360p，480p，540p，720p，1080p
	// Definition
	FileType string `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"` //流文件类型，默认video，支持：加密视频流evideo，加密音频流传eaudio，非加密视频流video，普通音频音频流audio
	// FileType
	LogoType string `protobuf:"bytes,6,opt,name=LogoType,proto3" json:"LogoType,omitempty"` // 水印贴片标签
	Base64   string `protobuf:"bytes,7,opt,name=Base64,proto3" json:"Base64,omitempty"`     //播放地址是否base64编码，默认否，支持设置： 0-否，1-是
	Ssl      string `protobuf:"bytes,8,opt,name=Ssl,proto3" json:"Ssl,omitempty"`           //返回https播放地址，默认否, 1-是；0-否
}

func (x *VodGetPlayInfoRequest) Reset() {
	*x = VodGetPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoRequest) ProtoMessage() {}

func (x *VodGetPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{0}
}

func (x *VodGetPlayInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *VodGetPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type VodGetPlayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMetadata *ResponseMetadata     `protobuf:"bytes,1,opt,name=ResponseMetadata,proto3" json:"ResponseMetadata,omitempty"`
	Result           *VodGetPlayInfoResult `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *VodGetPlayInfoResponse) Reset() {
	*x = VodGetPlayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoResponse) ProtoMessage() {}

func (x *VodGetPlayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoResponse.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoResponse) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{1}
}

func (x *VodGetPlayInfoResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

func (x *VodGetPlayInfoResponse) GetResult() *VodGetPlayInfoResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type VodGetPlayInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid            string           `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`                        // 唯一ID
	Status         int64            `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`                 //状态
	PosterUrl      string           `protobuf:"bytes,3,opt,name=PosterUrl,proto3" json:"PosterUrl,omitempty"`            //封面地址
	Duration       float32          `protobuf:"fixed32,4,opt,name=Duration,proto3" json:"Duration,omitempty"`            //播放时长(单位：s)
	FileType       string           `protobuf:"bytes,5,opt,name=FileType,proto3" json:"FileType,omitempty"`              // 媒体类型
	EnableAdaptive bool             `protobuf:"varint,6,opt,name=EnableAdaptive,proto3" json:"EnableAdaptive,omitempty"` //是否关键针对齐
	TotalCount     int64            `protobuf:"varint,7,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`         //播放列表数量
	AdaptiveInfo   *VodAdaptiveInfo `protobuf:"bytes,8,opt,name=AdaptiveInfo,proto3" json:"AdaptiveInfo,omitempty"`      // dash播放信息
	PlayInfoList   []*VodPlayInfo   `protobuf:"bytes,9,rep,name=PlayInfoList,proto3" json:"PlayInfoList,omitempty"`      //播放列表
}

func (x *VodGetPlayInfoResult) Reset() {
	*x = VodGetPlayInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetPlayInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetPlayInfoResult) ProtoMessage() {}

func (x *VodGetPlayInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetPlayInfoResult.ProtoReflect.Descriptor instead.
func (*VodGetPlayInfoResult) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{2}
}

func (x *VodGetPlayInfoResult) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetPlayInfoResult) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VodGetPlayInfoResult) GetPosterUrl() string {
	if x != nil {
		return x.PosterUrl
	}
	return ""
}

func (x *VodGetPlayInfoResult) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodGetPlayInfoResult) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetPlayInfoResult) GetEnableAdaptive() bool {
	if x != nil {
		return x.EnableAdaptive
	}
	return false
}

func (x *VodGetPlayInfoResult) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodGetPlayInfoResult) GetAdaptiveInfo() *VodAdaptiveInfo {
	if x != nil {
		return x.AdaptiveInfo
	}
	return nil
}

func (x *VodGetPlayInfoResult) GetPlayInfoList() []*VodPlayInfo {
	if x != nil {
		return x.PlayInfoList
	}
	return nil
}

type VodAdaptiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainPlayUrl   string `protobuf:"bytes,1,opt,name=MainPlayUrl,proto3" json:"MainPlayUrl,omitempty"`     // mpd主链接
	BackupPlayUrl string `protobuf:"bytes,2,opt,name=BackupPlayUrl,proto3" json:"BackupPlayUrl,omitempty"` // mpd备用链接
	AdaptiveType  string `protobuf:"bytes,3,opt,name=AdaptiveType,proto3" json:"AdaptiveType,omitempty"`   // 动态类型segment_base-mpd,segment_template-dash
}

func (x *VodAdaptiveInfo) Reset() {
	*x = VodAdaptiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodAdaptiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodAdaptiveInfo) ProtoMessage() {}

func (x *VodAdaptiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodAdaptiveInfo.ProtoReflect.Descriptor instead.
func (*VodAdaptiveInfo) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{3}
}

func (x *VodAdaptiveInfo) GetMainPlayUrl() string {
	if x != nil {
		return x.MainPlayUrl
	}
	return ""
}

func (x *VodAdaptiveInfo) GetBackupPlayUrl() string {
	if x != nil {
		return x.BackupPlayUrl
	}
	return ""
}

func (x *VodAdaptiveInfo) GetAdaptiveType() string {
	if x != nil {
		return x.AdaptiveType
	}
	return ""
}

type VodPlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID          string  `protobuf:"bytes,1,opt,name=FileID,proto3" json:"FileID,omitempty"`                     //文件ID
	Md5             string  `protobuf:"bytes,2,opt,name=Md5,proto3" json:"Md5,omitempty"`                           // hash值
	FileType        string  `protobuf:"bytes,3,opt,name=FileType,proto3" json:"FileType,omitempty"`                 // 文件类型 video/audio
	Format          string  `protobuf:"bytes,4,opt,name=Format,proto3" json:"Format,omitempty"`                     //视频格式
	Codec           string  `protobuf:"bytes,5,opt,name=Codec,proto3" json:"Codec,omitempty"`                       //编码类型
	Definition      string  `protobuf:"bytes,6,opt,name=Definition,proto3" json:"Definition,omitempty"`             //视频分辨率
	MainPlayUrl     string  `protobuf:"bytes,7,opt,name=MainPlayUrl,proto3" json:"MainPlayUrl,omitempty"`           //主播放地址
	BackupPlayUrl   string  `protobuf:"bytes,8,opt,name=BackupPlayUrl,proto3" json:"BackupPlayUrl,omitempty"`       //备用播放地址
	Bitrate         float32 `protobuf:"fixed32,9,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`                 //码率(Kbps)
	Width           int64   `protobuf:"varint,10,opt,name=Width,proto3" json:"Width,omitempty"`                     //视频高度
	Height          int64   `protobuf:"varint,11,opt,name=Height,proto3" json:"Height,omitempty"`                   //视频宽度
	Size            int64   `protobuf:"varint,12,opt,name=Size,proto3" json:"Size,omitempty"`                       //文件大小
	CheckInfo       string  `protobuf:"bytes,13,opt,name=CheckInfo,proto3" json:"CheckInfo,omitempty"`              //劫持校验信息
	IndexRange      string  `protobuf:"bytes,14,opt,name=IndexRange,proto3" json:"IndexRange,omitempty"`            // dash segment_base 分片信息
	InitRange       string  `protobuf:"bytes,15,opt,name=InitRange,proto3" json:"InitRange,omitempty"`              // dash segment_base 分片信息
	PreloadSize     int64   `protobuf:"varint,16,opt,name=PreloadSize,proto3" json:"PreloadSize,omitempty"`         //预加载大小
	PreloadMinStep  int64   `protobuf:"varint,17,opt,name=PreloadMinStep,proto3" json:"PreloadMinStep,omitempty"`   //最小步长
	PreloadMaxStep  int64   `protobuf:"varint,18,opt,name=PreloadMaxStep,proto3" json:"PreloadMaxStep,omitempty"`   //最大步长
	PreloadInterval int64   `protobuf:"varint,19,opt,name=PreloadInterval,proto3" json:"PreloadInterval,omitempty"` //间隔,提前加载时长
	P2PVerifyUrl    string  `protobuf:"bytes,20,opt,name=P2pVerifyUrl,proto3" json:"P2pVerifyUrl,omitempty"`        // p2p点播时，校验文件地址
	PlayAuth        string  `protobuf:"bytes,21,opt,name=PlayAuth,proto3" json:"PlayAuth,omitempty"`                //加密过的秘钥
	PlayAuthID      string  `protobuf:"bytes,22,opt,name=PlayAuthID,proto3" json:"PlayAuthID,omitempty"`            //密钥keyID
	LogoType        string  `protobuf:"bytes,23,opt,name=LogoType,proto3" json:"LogoType,omitempty"`                //水印类型
	Quality         string  `protobuf:"bytes,24,opt,name=Quality,proto3" json:"Quality,omitempty"`                  //音频质量
}

func (x *VodPlayInfo) Reset() {
	*x = VodPlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPlayInfo) ProtoMessage() {}

func (x *VodPlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPlayInfo.ProtoReflect.Descriptor instead.
func (*VodPlayInfo) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{4}
}

func (x *VodPlayInfo) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *VodPlayInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *VodPlayInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodPlayInfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodPlayInfo) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodPlayInfo) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VodPlayInfo) GetMainPlayUrl() string {
	if x != nil {
		return x.MainPlayUrl
	}
	return ""
}

func (x *VodPlayInfo) GetBackupPlayUrl() string {
	if x != nil {
		return x.BackupPlayUrl
	}
	return ""
}

func (x *VodPlayInfo) GetBitrate() float32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodPlayInfo) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodPlayInfo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodPlayInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VodPlayInfo) GetCheckInfo() string {
	if x != nil {
		return x.CheckInfo
	}
	return ""
}

func (x *VodPlayInfo) GetIndexRange() string {
	if x != nil {
		return x.IndexRange
	}
	return ""
}

func (x *VodPlayInfo) GetInitRange() string {
	if x != nil {
		return x.InitRange
	}
	return ""
}

func (x *VodPlayInfo) GetPreloadSize() int64 {
	if x != nil {
		return x.PreloadSize
	}
	return 0
}

func (x *VodPlayInfo) GetPreloadMinStep() int64 {
	if x != nil {
		return x.PreloadMinStep
	}
	return 0
}

func (x *VodPlayInfo) GetPreloadMaxStep() int64 {
	if x != nil {
		return x.PreloadMaxStep
	}
	return 0
}

func (x *VodPlayInfo) GetPreloadInterval() int64 {
	if x != nil {
		return x.PreloadInterval
	}
	return 0
}

func (x *VodPlayInfo) GetP2PVerifyUrl() string {
	if x != nil {
		return x.P2PVerifyUrl
	}
	return ""
}

func (x *VodPlayInfo) GetPlayAuth() string {
	if x != nil {
		return x.PlayAuth
	}
	return ""
}

func (x *VodPlayInfo) GetPlayAuthID() string {
	if x != nil {
		return x.PlayAuthID
	}
	return ""
}

func (x *VodPlayInfo) GetLogoType() string {
	if x != nil {
		return x.LogoType
	}
	return ""
}

func (x *VodPlayInfo) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

type VodGetOriginalPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vid    string `protobuf:"bytes,1,opt,name=Vid,proto3" json:"Vid,omitempty"`       //视频ID
	Base64 string `protobuf:"bytes,2,opt,name=Base64,proto3" json:"Base64,omitempty"` //播放地址是否base64编码,默认否，0-否，1-是
	Ssl    string `protobuf:"bytes,3,opt,name=Ssl,proto3" json:"Ssl,omitempty"`       //返回https播放地址,默认否, 0-否，1-是
}

func (x *VodGetOriginalPlayInfoRequest) Reset() {
	*x = VodGetOriginalPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetOriginalPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetOriginalPlayInfoRequest) ProtoMessage() {}

func (x *VodGetOriginalPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetOriginalPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*VodGetOriginalPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{5}
}

func (x *VodGetOriginalPlayInfoRequest) GetVid() string {
	if x != nil {
		return x.Vid
	}
	return ""
}

func (x *VodGetOriginalPlayInfoRequest) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *VodGetOriginalPlayInfoRequest) GetSsl() string {
	if x != nil {
		return x.Ssl
	}
	return ""
}

type VodGetOriginalPlayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMetadata *ResponseMetadata             `protobuf:"bytes,1,opt,name=ResponseMetadata,proto3" json:"ResponseMetadata,omitempty"`
	Result           *VodGetOriginalPlayInfoResult `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *VodGetOriginalPlayInfoResponse) Reset() {
	*x = VodGetOriginalPlayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetOriginalPlayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetOriginalPlayInfoResponse) ProtoMessage() {}

func (x *VodGetOriginalPlayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetOriginalPlayInfoResponse.ProtoReflect.Descriptor instead.
func (*VodGetOriginalPlayInfoResponse) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{6}
}

func (x *VodGetOriginalPlayInfoResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

func (x *VodGetOriginalPlayInfoResponse) GetResult() *VodGetOriginalPlayInfoResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type VodGetOriginalPlayInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType      string  `protobuf:"bytes,1,opt,name=FileType,proto3" json:"FileType,omitempty"`            //返回的媒体类型(video/audio)
	Duration      float32 `protobuf:"fixed32,2,opt,name=Duration,proto3" json:"Duration,omitempty"`          //视频时长(单位：s)
	Size          int64   `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`                   //视频文件大小
	Height        int64   `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`               //视频高度
	Width         int64   `protobuf:"varint,5,opt,name=Width,proto3" json:"Width,omitempty"`                 //视频宽度
	Format        string  `protobuf:"bytes,6,opt,name=Format,proto3" json:"Format,omitempty"`                //视频格式
	Codec         string  `protobuf:"bytes,7,opt,name=Codec,proto3" json:"Codec,omitempty"`                  //编码类型
	Bitrate       float32 `protobuf:"fixed32,8,opt,name=Bitrate,proto3" json:"Bitrate,omitempty"`            //码率(Kbps)
	Md5           string  `protobuf:"bytes,9,opt,name=Md5,proto3" json:"Md5,omitempty"`                      // hash值
	MainPlayUrl   string  `protobuf:"bytes,10,opt,name=MainPlayUrl,proto3" json:"MainPlayUrl,omitempty"`     //主播放地址
	BackupPlayUrl string  `protobuf:"bytes,11,opt,name=BackupPlayUrl,proto3" json:"BackupPlayUrl,omitempty"` //备用播放地址
}

func (x *VodGetOriginalPlayInfoResult) Reset() {
	*x = VodGetOriginalPlayInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vod_play_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetOriginalPlayInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetOriginalPlayInfoResult) ProtoMessage() {}

func (x *VodGetOriginalPlayInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_vod_play_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetOriginalPlayInfoResult.ProtoReflect.Descriptor instead.
func (*VodGetOriginalPlayInfoResult) Descriptor() ([]byte, []int) {
	return file_vod_play_proto_rawDescGZIP(), []int{7}
}

func (x *VodGetOriginalPlayInfoResult) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *VodGetOriginalPlayInfoResult) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *VodGetOriginalPlayInfoResult) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VodGetOriginalPlayInfoResult) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VodGetOriginalPlayInfoResult) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VodGetOriginalPlayInfoResult) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *VodGetOriginalPlayInfoResult) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *VodGetOriginalPlayInfoResult) GetBitrate() float32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VodGetOriginalPlayInfoResult) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *VodGetOriginalPlayInfoResult) GetMainPlayUrl() string {
	if x != nil {
		return x.MainPlayUrl
	}
	return ""
}

func (x *VodGetOriginalPlayInfoResult) GetBackupPlayUrl() string {
	if x != nil {
		return x.BackupPlayUrl
	}
	return ""
}

var File_vod_play_proto protoreflect.FileDescriptor

var file_vod_play_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x6f, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd9, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x73, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x22, 0xab, 0x01, 0x0a, 0x16,
	0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x14, 0x56, 0x6f,
	0x64, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56, 0x6f, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x56, 0x6f, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x0f, 0x56, 0x6f, 0x64, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x0b, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61,
	0x78, 0x53, 0x74, 0x65, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x32, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x32, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x1d, 0x56,
	0x6f, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x56, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x73, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x73, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x56, 0x6f, 0x64,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x56, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x56, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x64, 0x35,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x79,
	0x55, 0x72, 0x6c, 0x42, 0x3a, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x07, 0x56, 0x6f, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x01, 0x5a,
	0x08, 0x2e, 0x3b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vod_play_proto_rawDescOnce sync.Once
	file_vod_play_proto_rawDescData = file_vod_play_proto_rawDesc
)

func file_vod_play_proto_rawDescGZIP() []byte {
	file_vod_play_proto_rawDescOnce.Do(func() {
		file_vod_play_proto_rawDescData = protoimpl.X.CompressGZIP(file_vod_play_proto_rawDescData)
	})
	return file_vod_play_proto_rawDescData
}

var file_vod_play_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vod_play_proto_goTypes = []interface{}{
	(*VodGetPlayInfoRequest)(nil),          // 0: Vcloud.Models.Vod.VodGetPlayInfoRequest
	(*VodGetPlayInfoResponse)(nil),         // 1: Vcloud.Models.Vod.VodGetPlayInfoResponse
	(*VodGetPlayInfoResult)(nil),           // 2: Vcloud.Models.Vod.VodGetPlayInfoResult
	(*VodAdaptiveInfo)(nil),                // 3: Vcloud.Models.Vod.VodAdaptiveInfo
	(*VodPlayInfo)(nil),                    // 4: Vcloud.Models.Vod.VodPlayInfo
	(*VodGetOriginalPlayInfoRequest)(nil),  // 5: Vcloud.Models.Vod.VodGetOriginalPlayInfoRequest
	(*VodGetOriginalPlayInfoResponse)(nil), // 6: Vcloud.Models.Vod.VodGetOriginalPlayInfoResponse
	(*VodGetOriginalPlayInfoResult)(nil),   // 7: Vcloud.Models.Vod.VodGetOriginalPlayInfoResult
	(*ResponseMetadata)(nil),               // 8: Vcloud.Models.Base.ResponseMetadata
}
var file_vod_play_proto_depIdxs = []int32{
	8, // 0: Vcloud.Models.Vod.VodGetPlayInfoResponse.ResponseMetadata:type_name -> Vcloud.Models.Base.ResponseMetadata
	2, // 1: Vcloud.Models.Vod.VodGetPlayInfoResponse.Result:type_name -> Vcloud.Models.Vod.VodGetPlayInfoResult
	3, // 2: Vcloud.Models.Vod.VodGetPlayInfoResult.AdaptiveInfo:type_name -> Vcloud.Models.Vod.VodAdaptiveInfo
	4, // 3: Vcloud.Models.Vod.VodGetPlayInfoResult.PlayInfoList:type_name -> Vcloud.Models.Vod.VodPlayInfo
	8, // 4: Vcloud.Models.Vod.VodGetOriginalPlayInfoResponse.ResponseMetadata:type_name -> Vcloud.Models.Base.ResponseMetadata
	7, // 5: Vcloud.Models.Vod.VodGetOriginalPlayInfoResponse.Result:type_name -> Vcloud.Models.Vod.VodGetOriginalPlayInfoResult
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_vod_play_proto_init() }
func file_vod_play_proto_init() {
	if File_vod_play_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vod_play_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetPlayInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodAdaptiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetOriginalPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetOriginalPlayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vod_play_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetOriginalPlayInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vod_play_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vod_play_proto_goTypes,
		DependencyIndexes: file_vod_play_proto_depIdxs,
		MessageInfos:      file_vod_play_proto_msgTypes,
	}.Build()
	File_vod_play_proto = out.File
	file_vod_play_proto_rawDesc = nil
	file_vod_play_proto_goTypes = nil
	file_vod_play_proto_depIdxs = nil
}
