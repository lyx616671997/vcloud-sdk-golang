// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: video_model.proto

package video_model_utils

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MetaDataInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// TODO: 暂定string
	MediaType      string      `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Status         int64       `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	PosterUri      string      `protobuf:"bytes,4,opt,name=poster_uri,json=posterUri,proto3" json:"poster_uri,omitempty"`
	Thumbs         []*BigThumb `protobuf:"bytes,5,rep,name=thumbs,proto3" json:"thumbs,omitempty"`
	OriginalStream *PlayInfo   `protobuf:"bytes,6,opt,name=original_stream,json=originalStream,proto3" json:"original_stream,omitempty"`
	StaticStreams  []*PlayInfo `protobuf:"bytes,7,rep,name=static_streams,json=staticStreams,proto3" json:"static_streams,omitempty"`
	//TODO: hls换成PlayInfo类型
	HlsStreams     []*PlayInfo        `protobuf:"bytes,8,rep,name=hls_streams,json=hlsStreams,proto3" json:"hls_streams,omitempty"`
	DashStreams    []*DynamicPlayInfo `protobuf:"bytes,9,rep,name=dash_streams,json=dashStreams,proto3" json:"dash_streams,omitempty"`
	BarrageMaskUrl string             `protobuf:"bytes,10,opt,name=barrage_mask_url,json=barrageMaskUrl,proto3" json:"barrage_mask_url,omitempty"`
}

func (x *MetaDataInfo) Reset() {
	*x = MetaDataInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaDataInfo) ProtoMessage() {}

func (x *MetaDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaDataInfo.ProtoReflect.Descriptor instead.
func (*MetaDataInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{0}
}

func (x *MetaDataInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetaDataInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *MetaDataInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MetaDataInfo) GetPosterUri() string {
	if x != nil {
		return x.PosterUri
	}
	return ""
}

func (x *MetaDataInfo) GetThumbs() []*BigThumb {
	if x != nil {
		return x.Thumbs
	}
	return nil
}

func (x *MetaDataInfo) GetOriginalStream() *PlayInfo {
	if x != nil {
		return x.OriginalStream
	}
	return nil
}

func (x *MetaDataInfo) GetStaticStreams() []*PlayInfo {
	if x != nil {
		return x.StaticStreams
	}
	return nil
}

func (x *MetaDataInfo) GetHlsStreams() []*PlayInfo {
	if x != nil {
		return x.HlsStreams
	}
	return nil
}

func (x *MetaDataInfo) GetDashStreams() []*DynamicPlayInfo {
	if x != nil {
		return x.DashStreams
	}
	return nil
}

func (x *MetaDataInfo) GetBarrageMaskUrl() string {
	if x != nil {
		return x.BarrageMaskUrl
	}
	return ""
}

type PlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta              *BaseMeta      `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	PlayUri           string         `protobuf:"bytes,2,opt,name=play_uri,json=playUri,proto3" json:"play_uri,omitempty"`
	EncryptInfo       *EncryptInfo   `protobuf:"bytes,4,opt,name=encrypt_info,json=encryptInfo,proto3" json:"encrypt_info,omitempty"`
	BaseRangeInfo     *BaseRangeInfo `protobuf:"bytes,5,opt,name=base_range_info,json=baseRangeInfo,proto3" json:"base_range_info,omitempty"`
	CheckInfo         *CheckInfo     `protobuf:"bytes,6,opt,name=check_info,json=checkInfo,proto3" json:"check_info,omitempty"`
	KeyframeAlignment string         `protobuf:"bytes,7,opt,name=keyframe_alignment,json=keyframeAlignment,proto3" json:"keyframe_alignment,omitempty"`
}

func (x *PlayInfo) Reset() {
	*x = PlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayInfo) ProtoMessage() {}

func (x *PlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayInfo.ProtoReflect.Descriptor instead.
func (*PlayInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{1}
}

func (x *PlayInfo) GetMeta() *BaseMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PlayInfo) GetPlayUri() string {
	if x != nil {
		return x.PlayUri
	}
	return ""
}

func (x *PlayInfo) GetEncryptInfo() *EncryptInfo {
	if x != nil {
		return x.EncryptInfo
	}
	return nil
}

func (x *PlayInfo) GetBaseRangeInfo() *BaseRangeInfo {
	if x != nil {
		return x.BaseRangeInfo
	}
	return nil
}

func (x *PlayInfo) GetCheckInfo() *CheckInfo {
	if x != nil {
		return x.CheckInfo
	}
	return nil
}

func (x *PlayInfo) GetKeyframeAlignment() string {
	if x != nil {
		return x.KeyframeAlignment
	}
	return ""
}

type DynamicPlayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicVideoList []*PlayInfo `protobuf:"bytes,1,rep,name=dynamic_video_list,json=dynamicVideoList,proto3" json:"dynamic_video_list,omitempty"`
	DynamicAudioList []*PlayInfo `protobuf:"bytes,2,rep,name=dynamic_audio_list,json=dynamicAudioList,proto3" json:"dynamic_audio_list,omitempty"`
}

func (x *DynamicPlayInfo) Reset() {
	*x = DynamicPlayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPlayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPlayInfo) ProtoMessage() {}

func (x *DynamicPlayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPlayInfo.ProtoReflect.Descriptor instead.
func (*DynamicPlayInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{2}
}

func (x *DynamicPlayInfo) GetDynamicVideoList() []*PlayInfo {
	if x != nil {
		return x.DynamicVideoList
	}
	return nil
}

func (x *DynamicPlayInfo) GetDynamicAudioList() []*PlayInfo {
	if x != nil {
		return x.DynamicAudioList
	}
	return nil
}

type BaseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      string  `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	CodecType   string  `protobuf:"bytes,2,opt,name=codec_type,json=codecType,proto3" json:"codec_type,omitempty"`
	Size        int64   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Duration    float64 `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	FormatType  string  `protobuf:"bytes,5,opt,name=format_type,json=formatType,proto3" json:"format_type,omitempty"`
	Width       int64   `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height      int64   `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Bitrate     int64   `protobuf:"varint,8,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Definition  string  `protobuf:"bytes,9,opt,name=definition,proto3" json:"definition,omitempty"`
	Quality     string  `protobuf:"bytes,10,opt,name=quality,proto3" json:"quality,omitempty"`
	QualityDesc string  `protobuf:"bytes,11,opt,name=quality_desc,json=qualityDesc,proto3" json:"quality_desc,omitempty"`
	Fps         int64   `protobuf:"varint,12,opt,name=fps,proto3" json:"fps,omitempty"`
	Md5         string  `protobuf:"bytes,13,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *BaseMeta) Reset() {
	*x = BaseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMeta) ProtoMessage() {}

func (x *BaseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMeta.ProtoReflect.Descriptor instead.
func (*BaseMeta) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{3}
}

func (x *BaseMeta) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *BaseMeta) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *BaseMeta) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BaseMeta) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BaseMeta) GetFormatType() string {
	if x != nil {
		return x.FormatType
	}
	return ""
}

func (x *BaseMeta) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BaseMeta) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BaseMeta) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *BaseMeta) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BaseMeta) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *BaseMeta) GetQualityDesc() string {
	if x != nil {
		return x.QualityDesc
	}
	return ""
}

func (x *BaseMeta) GetFps() int64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *BaseMeta) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

type VideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int64         `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message        string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Version        int64         `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	VideoId        string        `protobuf:"bytes,4,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	EnableSsl      bool          `protobuf:"varint,5,opt,name=enable_ssl,json=enableSsl,proto3" json:"enable_ssl,omitempty"`
	VideoDuration  float64       `protobuf:"fixed64,6,opt,name=video_duration,json=videoDuration,proto3" json:"video_duration,omitempty"`
	MediaType      string        `protobuf:"bytes,7,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	UrlExpire      int64         `protobuf:"varint,8,opt,name=url_expire,json=urlExpire,proto3" json:"url_expire,omitempty"`
	BigThumbs      []*BigThumb   `protobuf:"bytes,9,rep,name=big_thumbs,json=bigThumbs,proto3" json:"big_thumbs,omitempty"`
	BarrageMaskUrl string        `protobuf:"bytes,10,opt,name=barrage_mask_url,json=barrageMaskUrl,proto3" json:"barrage_mask_url,omitempty"`
	FallbackApi    *FallBackAPI  `protobuf:"bytes,11,opt,name=fallback_api,json=fallbackApi,proto3" json:"fallback_api,omitempty"`
	SeekTs         *SeekOffSet   `protobuf:"bytes,12,opt,name=seek_ts,json=seekTs,proto3" json:"seek_ts,omitempty"`
	DnsInfo        *DNSInfo      `protobuf:"bytes,13,opt,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty"`
	VideoList      []*Video      `protobuf:"bytes,14,rep,name=video_list,json=videoList,proto3" json:"video_list,omitempty"`
	DynamicVideo   *DynamicVideo `protobuf:"bytes,15,opt,name=dynamic_video,json=dynamicVideo,proto3" json:"dynamic_video,omitempty"`
	EnableAdaptive bool          `protobuf:"varint,16,opt,name=enable_adaptive,json=enableAdaptive,proto3" json:"enable_adaptive,omitempty"`
}

func (x *VideoInfo) Reset() {
	*x = VideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoInfo) ProtoMessage() {}

func (x *VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoInfo.ProtoReflect.Descriptor instead.
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{4}
}

func (x *VideoInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VideoInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VideoInfo) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VideoInfo) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoInfo) GetEnableSsl() bool {
	if x != nil {
		return x.EnableSsl
	}
	return false
}

func (x *VideoInfo) GetVideoDuration() float64 {
	if x != nil {
		return x.VideoDuration
	}
	return 0
}

func (x *VideoInfo) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *VideoInfo) GetUrlExpire() int64 {
	if x != nil {
		return x.UrlExpire
	}
	return 0
}

func (x *VideoInfo) GetBigThumbs() []*BigThumb {
	if x != nil {
		return x.BigThumbs
	}
	return nil
}

func (x *VideoInfo) GetBarrageMaskUrl() string {
	if x != nil {
		return x.BarrageMaskUrl
	}
	return ""
}

func (x *VideoInfo) GetFallbackApi() *FallBackAPI {
	if x != nil {
		return x.FallbackApi
	}
	return nil
}

func (x *VideoInfo) GetSeekTs() *SeekOffSet {
	if x != nil {
		return x.SeekTs
	}
	return nil
}

func (x *VideoInfo) GetDnsInfo() *DNSInfo {
	if x != nil {
		return x.DnsInfo
	}
	return nil
}

func (x *VideoInfo) GetVideoList() []*Video {
	if x != nil {
		return x.VideoList
	}
	return nil
}

func (x *VideoInfo) GetDynamicVideo() *DynamicVideo {
	if x != nil {
		return x.DynamicVideo
	}
	return nil
}

func (x *VideoInfo) GetEnableAdaptive() bool {
	if x != nil {
		return x.EnableAdaptive
	}
	return false
}

type FallBackAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FallbackApi string `protobuf:"bytes,1,opt,name=fallback_api,json=fallbackApi,proto3" json:"fallback_api,omitempty"`
	KeySeed     string `protobuf:"bytes,2,opt,name=key_seed,json=keySeed,proto3" json:"key_seed,omitempty"`
}

func (x *FallBackAPI) Reset() {
	*x = FallBackAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallBackAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallBackAPI) ProtoMessage() {}

func (x *FallBackAPI) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallBackAPI.ProtoReflect.Descriptor instead.
func (*FallBackAPI) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{5}
}

func (x *FallBackAPI) GetFallbackApi() string {
	if x != nil {
		return x.FallbackApi
	}
	return ""
}

func (x *FallBackAPI) GetKeySeed() string {
	if x != nil {
		return x.KeySeed
	}
	return ""
}

type DynamicVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicType      string   `protobuf:"bytes,1,opt,name=dynamic_type,json=dynamicType,proto3" json:"dynamic_type,omitempty"`
	DynamicVideoList []*Video `protobuf:"bytes,2,rep,name=dynamic_video_list,json=dynamicVideoList,proto3" json:"dynamic_video_list,omitempty"`
	DynamicAudioList []*Audio `protobuf:"bytes,3,rep,name=dynamic_audio_list,json=dynamicAudioList,proto3" json:"dynamic_audio_list,omitempty"`
	MainUrl          string   `protobuf:"bytes,4,opt,name=main_url,json=mainUrl,proto3" json:"main_url,omitempty"`
	BackupUrl        string   `protobuf:"bytes,5,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
}

func (x *DynamicVideo) Reset() {
	*x = DynamicVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicVideo) ProtoMessage() {}

func (x *DynamicVideo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicVideo.ProtoReflect.Descriptor instead.
func (*DynamicVideo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{6}
}

func (x *DynamicVideo) GetDynamicType() string {
	if x != nil {
		return x.DynamicType
	}
	return ""
}

func (x *DynamicVideo) GetDynamicVideoList() []*Video {
	if x != nil {
		return x.DynamicVideoList
	}
	return nil
}

func (x *DynamicVideo) GetDynamicAudioList() []*Audio {
	if x != nil {
		return x.DynamicAudioList
	}
	return nil
}

func (x *DynamicVideo) GetMainUrl() string {
	if x != nil {
		return x.MainUrl
	}
	return ""
}

func (x *DynamicVideo) GetBackupUrl() string {
	if x != nil {
		return x.BackupUrl
	}
	return ""
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainUrl       string         `protobuf:"bytes,1,opt,name=main_url,json=mainUrl,proto3" json:"main_url,omitempty"`
	BackupUrl     string         `protobuf:"bytes,2,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	VideoMeta     *VideoMeta     `protobuf:"bytes,3,opt,name=video_meta,json=videoMeta,proto3" json:"video_meta,omitempty"`
	EncryptInfo   *EncryptInfo   `protobuf:"bytes,4,opt,name=encrypt_info,json=encryptInfo,proto3" json:"encrypt_info,omitempty"`
	BaseRangeInfo *BaseRangeInfo `protobuf:"bytes,5,opt,name=base_range_info,json=baseRangeInfo,proto3" json:"base_range_info,omitempty"`
	P2PInfo       *P2PInfo       `protobuf:"bytes,6,opt,name=p2p_info,json=p2pInfo,proto3" json:"p2p_info,omitempty"`
	CheckInfo     *CheckInfo     `protobuf:"bytes,7,opt,name=check_info,json=checkInfo,proto3" json:"check_info,omitempty"`
	BarrageInfo   *BarrageInfo   `protobuf:"bytes,8,opt,name=barrage_info,json=barrageInfo,proto3" json:"barrage_info,omitempty"`
	FitterInfo    *FitterInfo    `protobuf:"bytes,9,opt,name=fitter_info,json=fitterInfo,proto3" json:"fitter_info,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{7}
}

func (x *Video) GetMainUrl() string {
	if x != nil {
		return x.MainUrl
	}
	return ""
}

func (x *Video) GetBackupUrl() string {
	if x != nil {
		return x.BackupUrl
	}
	return ""
}

func (x *Video) GetVideoMeta() *VideoMeta {
	if x != nil {
		return x.VideoMeta
	}
	return nil
}

func (x *Video) GetEncryptInfo() *EncryptInfo {
	if x != nil {
		return x.EncryptInfo
	}
	return nil
}

func (x *Video) GetBaseRangeInfo() *BaseRangeInfo {
	if x != nil {
		return x.BaseRangeInfo
	}
	return nil
}

func (x *Video) GetP2PInfo() *P2PInfo {
	if x != nil {
		return x.P2PInfo
	}
	return nil
}

func (x *Video) GetCheckInfo() *CheckInfo {
	if x != nil {
		return x.CheckInfo
	}
	return nil
}

func (x *Video) GetBarrageInfo() *BarrageInfo {
	if x != nil {
		return x.BarrageInfo
	}
	return nil
}

func (x *Video) GetFitterInfo() *FitterInfo {
	if x != nil {
		return x.FitterInfo
	}
	return nil
}

type Audio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainUrl       string         `protobuf:"bytes,1,opt,name=main_url,json=mainUrl,proto3" json:"main_url,omitempty"`
	BackupUrl     string         `protobuf:"bytes,2,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	AudioMeta     *AudioMeta     `protobuf:"bytes,3,opt,name=audio_meta,json=audioMeta,proto3" json:"audio_meta,omitempty"`
	EncryptInfo   *EncryptInfo   `protobuf:"bytes,4,opt,name=encrypt_info,json=encryptInfo,proto3" json:"encrypt_info,omitempty"`
	BaseRangeInfo *BaseRangeInfo `protobuf:"bytes,5,opt,name=base_range_info,json=baseRangeInfo,proto3" json:"base_range_info,omitempty"`
	P2PInfo       *P2PInfo       `protobuf:"bytes,6,opt,name=p2p_info,json=p2pInfo,proto3" json:"p2p_info,omitempty"`
	CheckInfo     *CheckInfo     `protobuf:"bytes,7,opt,name=check_info,json=checkInfo,proto3" json:"check_info,omitempty"`
	FitterInfo    *FitterInfo    `protobuf:"bytes,8,opt,name=fitter_info,json=fitterInfo,proto3" json:"fitter_info,omitempty"`
}

func (x *Audio) Reset() {
	*x = Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{8}
}

func (x *Audio) GetMainUrl() string {
	if x != nil {
		return x.MainUrl
	}
	return ""
}

func (x *Audio) GetBackupUrl() string {
	if x != nil {
		return x.BackupUrl
	}
	return ""
}

func (x *Audio) GetAudioMeta() *AudioMeta {
	if x != nil {
		return x.AudioMeta
	}
	return nil
}

func (x *Audio) GetEncryptInfo() *EncryptInfo {
	if x != nil {
		return x.EncryptInfo
	}
	return nil
}

func (x *Audio) GetBaseRangeInfo() *BaseRangeInfo {
	if x != nil {
		return x.BaseRangeInfo
	}
	return nil
}

func (x *Audio) GetP2PInfo() *P2PInfo {
	if x != nil {
		return x.P2PInfo
	}
	return nil
}

func (x *Audio) GetCheckInfo() *CheckInfo {
	if x != nil {
		return x.CheckInfo
	}
	return nil
}

func (x *Audio) GetFitterInfo() *FitterInfo {
	if x != nil {
		return x.FitterInfo
	}
	return nil
}

type VideoMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition  string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	Quality     string `protobuf:"bytes,2,opt,name=quality,proto3" json:"quality,omitempty"`
	QualityDesc string `protobuf:"bytes,3,opt,name=quality_desc,json=qualityDesc,proto3" json:"quality_desc,omitempty"`
	Vtype       string `protobuf:"bytes,4,opt,name=vtype,proto3" json:"vtype,omitempty"`
	Vwidth      int64  `protobuf:"varint,5,opt,name=vwidth,proto3" json:"vwidth,omitempty"`
	Vheight     int64  `protobuf:"varint,6,opt,name=vheight,proto3" json:"vheight,omitempty"`
	Bitrate     int64  `protobuf:"varint,7,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	CodecType   string `protobuf:"bytes,8,opt,name=codec_type,json=codecType,proto3" json:"codec_type,omitempty"`
	Size        int64  `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	FileId      string `protobuf:"bytes,10,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Fps         int64  `protobuf:"varint,11,opt,name=fps,proto3" json:"fps,omitempty"`
}

func (x *VideoMeta) Reset() {
	*x = VideoMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMeta) ProtoMessage() {}

func (x *VideoMeta) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMeta.ProtoReflect.Descriptor instead.
func (*VideoMeta) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{9}
}

func (x *VideoMeta) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *VideoMeta) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *VideoMeta) GetQualityDesc() string {
	if x != nil {
		return x.QualityDesc
	}
	return ""
}

func (x *VideoMeta) GetVtype() string {
	if x != nil {
		return x.Vtype
	}
	return ""
}

func (x *VideoMeta) GetVwidth() int64 {
	if x != nil {
		return x.Vwidth
	}
	return 0
}

func (x *VideoMeta) GetVheight() int64 {
	if x != nil {
		return x.Vheight
	}
	return 0
}

func (x *VideoMeta) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *VideoMeta) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *VideoMeta) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *VideoMeta) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *VideoMeta) GetFps() int64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

type AudioMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition  string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	Quality     string `protobuf:"bytes,2,opt,name=quality,proto3" json:"quality,omitempty"`
	QualityDesc string `protobuf:"bytes,3,opt,name=quality_desc,json=qualityDesc,proto3" json:"quality_desc,omitempty"`
	Atype       string `protobuf:"bytes,4,opt,name=atype,proto3" json:"atype,omitempty"`
	Bitrate     int64  `protobuf:"varint,5,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	CodecType   string `protobuf:"bytes,6,opt,name=codec_type,json=codecType,proto3" json:"codec_type,omitempty"`
	Size        int64  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	FileId      string `protobuf:"bytes,8,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *AudioMeta) Reset() {
	*x = AudioMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMeta) ProtoMessage() {}

func (x *AudioMeta) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMeta.ProtoReflect.Descriptor instead.
func (*AudioMeta) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{10}
}

func (x *AudioMeta) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *AudioMeta) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *AudioMeta) GetQualityDesc() string {
	if x != nil {
		return x.QualityDesc
	}
	return ""
}

func (x *AudioMeta) GetAtype() string {
	if x != nil {
		return x.Atype
	}
	return ""
}

func (x *AudioMeta) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *AudioMeta) GetCodecType() string {
	if x != nil {
		return x.CodecType
	}
	return ""
}

func (x *AudioMeta) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AudioMeta) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type EncryptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encrypt bool   `protobuf:"varint,1,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	Kid     string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
	SpadeA  string `protobuf:"bytes,3,opt,name=spade_a,json=spadeA,proto3" json:"spade_a,omitempty"`
}

func (x *EncryptInfo) Reset() {
	*x = EncryptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptInfo) ProtoMessage() {}

func (x *EncryptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptInfo.ProtoReflect.Descriptor instead.
func (*EncryptInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{11}
}

func (x *EncryptInfo) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

func (x *EncryptInfo) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *EncryptInfo) GetSpadeA() string {
	if x != nil {
		return x.SpadeA
	}
	return ""
}

type P2PInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P2PVerifyUrl string `protobuf:"bytes,1,opt,name=p2p_verify_url,json=p2pVerifyUrl,proto3" json:"p2p_verify_url,omitempty"`
}

func (x *P2PInfo) Reset() {
	*x = P2PInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PInfo) ProtoMessage() {}

func (x *P2PInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PInfo.ProtoReflect.Descriptor instead.
func (*P2PInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{12}
}

func (x *P2PInfo) GetP2PVerifyUrl() string {
	if x != nil {
		return x.P2PVerifyUrl
	}
	return ""
}

type BaseRangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitRange  string `protobuf:"bytes,1,opt,name=init_range,json=initRange,proto3" json:"init_range,omitempty"`
	IndexRange string `protobuf:"bytes,2,opt,name=index_range,json=indexRange,proto3" json:"index_range,omitempty"`
}

func (x *BaseRangeInfo) Reset() {
	*x = BaseRangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRangeInfo) ProtoMessage() {}

func (x *BaseRangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRangeInfo.ProtoReflect.Descriptor instead.
func (*BaseRangeInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{13}
}

func (x *BaseRangeInfo) GetInitRange() string {
	if x != nil {
		return x.InitRange
	}
	return ""
}

func (x *BaseRangeInfo) GetIndexRange() string {
	if x != nil {
		return x.IndexRange
	}
	return ""
}

type BarrageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarrageMaskOffset string `protobuf:"bytes,1,opt,name=barrage_mask_offset,json=barrageMaskOffset,proto3" json:"barrage_mask_offset,omitempty"`
}

func (x *BarrageInfo) Reset() {
	*x = BarrageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarrageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageInfo) ProtoMessage() {}

func (x *BarrageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageInfo.ProtoReflect.Descriptor instead.
func (*BarrageInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{14}
}

func (x *BarrageInfo) GetBarrageMaskOffset() string {
	if x != nil {
		return x.BarrageMaskOffset
	}
	return ""
}

type CheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckInfo string `protobuf:"bytes,1,opt,name=check_info,json=checkInfo,proto3" json:"check_info,omitempty"`
}

func (x *CheckInfo) Reset() {
	*x = CheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInfo) ProtoMessage() {}

func (x *CheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInfo.ProtoReflect.Descriptor instead.
func (*CheckInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{15}
}

func (x *CheckInfo) GetCheckInfo() string {
	if x != nil {
		return x.CheckInfo
	}
	return ""
}

type BigThumb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgNum   int64    `protobuf:"varint,1,opt,name=img_num,json=imgNum,proto3" json:"img_num,omitempty"`
	ImgUri   string   `protobuf:"bytes,2,opt,name=img_uri,json=imgUri,proto3" json:"img_uri,omitempty"`
	ImgUrl   string   `protobuf:"bytes,3,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`
	ImgXSize int64    `protobuf:"varint,4,opt,name=img_x_size,json=imgXSize,proto3" json:"img_x_size,omitempty"`
	ImgYSize int64    `protobuf:"varint,5,opt,name=img_y_size,json=imgYSize,proto3" json:"img_y_size,omitempty"`
	ImgXLen  int64    `protobuf:"varint,6,opt,name=img_x_len,json=imgXLen,proto3" json:"img_x_len,omitempty"`
	ImgYLen  int64    `protobuf:"varint,7,opt,name=img_y_len,json=imgYLen,proto3" json:"img_y_len,omitempty"`
	Duration float64  `protobuf:"fixed64,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Interval float64  `protobuf:"fixed64,9,opt,name=interval,proto3" json:"interval,omitempty"`
	Fext     string   `protobuf:"bytes,10,opt,name=fext,proto3" json:"fext,omitempty"`
	ImgUrls  []string `protobuf:"bytes,11,rep,name=img_urls,json=imgUrls,proto3" json:"img_urls,omitempty"`
}

func (x *BigThumb) Reset() {
	*x = BigThumb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigThumb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigThumb) ProtoMessage() {}

func (x *BigThumb) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigThumb.ProtoReflect.Descriptor instead.
func (*BigThumb) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{16}
}

func (x *BigThumb) GetImgNum() int64 {
	if x != nil {
		return x.ImgNum
	}
	return 0
}

func (x *BigThumb) GetImgUri() string {
	if x != nil {
		return x.ImgUri
	}
	return ""
}

func (x *BigThumb) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *BigThumb) GetImgXSize() int64 {
	if x != nil {
		return x.ImgXSize
	}
	return 0
}

func (x *BigThumb) GetImgYSize() int64 {
	if x != nil {
		return x.ImgYSize
	}
	return 0
}

func (x *BigThumb) GetImgXLen() int64 {
	if x != nil {
		return x.ImgXLen
	}
	return 0
}

func (x *BigThumb) GetImgYLen() int64 {
	if x != nil {
		return x.ImgYLen
	}
	return 0
}

func (x *BigThumb) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BigThumb) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *BigThumb) GetFext() string {
	if x != nil {
		return x.Fext
	}
	return ""
}

func (x *BigThumb) GetImgUrls() []string {
	if x != nil {
		return x.ImgUrls
	}
	return nil
}

type FitterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncParams []float64 `protobuf:"fixed64,1,rep,packed,name=func_params,json=funcParams,proto3" json:"func_params,omitempty"`
	HeaderSize int64     `protobuf:"varint,2,opt,name=header_size,json=headerSize,proto3" json:"header_size,omitempty"`
	Duration   float64   `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *FitterInfo) Reset() {
	*x = FitterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FitterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FitterInfo) ProtoMessage() {}

func (x *FitterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FitterInfo.ProtoReflect.Descriptor instead.
func (*FitterInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{17}
}

func (x *FitterInfo) GetFuncParams() []float64 {
	if x != nil {
		return x.FuncParams
	}
	return nil
}

func (x *FitterInfo) GetHeaderSize() int64 {
	if x != nil {
		return x.HeaderSize
	}
	return 0
}

func (x *FitterInfo) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type SeekOffSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opening float64 `protobuf:"fixed64,1,opt,name=opening,proto3" json:"opening,omitempty"`
	Ending  float64 `protobuf:"fixed64,2,opt,name=ending,proto3" json:"ending,omitempty"`
}

func (x *SeekOffSet) Reset() {
	*x = SeekOffSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekOffSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekOffSet) ProtoMessage() {}

func (x *SeekOffSet) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekOffSet.ProtoReflect.Descriptor instead.
func (*SeekOffSet) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{18}
}

func (x *SeekOffSet) GetOpening() float64 {
	if x != nil {
		return x.Opening
	}
	return 0
}

func (x *SeekOffSet) GetEnding() float64 {
	if x != nil {
		return x.Ending
	}
	return 0
}

type DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dns []string `protobuf:"bytes,1,rep,name=dns,proto3" json:"dns,omitempty"`
}

func (x *DNS) Reset() {
	*x = DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{19}
}

func (x *DNS) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

type DNSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsInfo map[string]*DNS `protobuf:"bytes,1,rep,name=dns_info,json=dnsInfo,proto3" json:"dns_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DnsTime int64           `protobuf:"varint,2,opt,name=dns_time,json=dnsTime,proto3" json:"dns_time,omitempty"`
}

func (x *DNSInfo) Reset() {
	*x = DNSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSInfo) ProtoMessage() {}

func (x *DNSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSInfo.ProtoReflect.Descriptor instead.
func (*DNSInfo) Descriptor() ([]byte, []int) {
	return file_video_model_proto_rawDescGZIP(), []int{20}
}

func (x *DNSInfo) GetDnsInfo() map[string]*DNS {
	if x != nil {
		return x.DnsInfo
	}
	return nil
}

func (x *DNSInfo) GetDnsTime() int64 {
	if x != nil {
		return x.DnsTime
	}
	return 0
}

var File_video_model_proto protoreflect.FileDescriptor

var file_video_model_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb0, 0x03, 0x0a,
	0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x72, 0x69, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69,
	0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x06, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x3a,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x68, 0x6c,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x61, 0x73, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x22,
	0xa7, 0x02, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x69, 0x12, 0x37,
	0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x65,
	0x79, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a,
	0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xdc, 0x02, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0xfa,
	0x04, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x73,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x73, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x72,
	0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x5f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x69, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x09,
	0x62, 0x69, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x61, 0x70, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x52,
	0x0b, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x69, 0x12, 0x2c, 0x0a, 0x07,
	0x73, 0x65, 0x65, 0x6b, 0x5f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x4f, 0x66, 0x66, 0x53,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x65, 0x6b, 0x54, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x6e,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x64, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x46,
	0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x70, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x65, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x12,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x12, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55,
	0x72, 0x6c, 0x22, 0xbc, 0x03, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x32, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x32, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x32, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x66,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x83, 0x03, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x32, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x32,
	0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x32, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x66, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66,
	0x70, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0b, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x41, 0x22, 0x2f, 0x0a,
	0x07, 0x50, 0x32, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x32, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x32, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x4f,
	0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x3d, 0x0a, 0x0b, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x2a,
	0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x02, 0x0a, 0x08, 0x42,
	0x69, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4e, 0x75, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6d, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6d, 0x67, 0x5f, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x58, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6d, 0x67, 0x5f, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x59, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x09, 0x69, 0x6d, 0x67, 0x5f, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x58, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x6d,
	0x67, 0x5f, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69,
	0x6d, 0x67, 0x59, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65,
	0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x6a, 0x0a,
	0x0a, 0x46, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x75, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x0a, 0x53, 0x65, 0x65,
	0x6b, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x17, 0x0a, 0x03, 0x44, 0x4e, 0x53,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x4e, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x64, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x48, 0x0a, 0x0c, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_video_model_proto_rawDescOnce sync.Once
	file_video_model_proto_rawDescData = file_video_model_proto_rawDesc
)

func file_video_model_proto_rawDescGZIP() []byte {
	file_video_model_proto_rawDescOnce.Do(func() {
		file_video_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_model_proto_rawDescData)
	})
	return file_video_model_proto_rawDescData
}

var file_video_model_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_video_model_proto_goTypes = []interface{}{
	(*MetaDataInfo)(nil),    // 0: service.MetaDataInfo
	(*PlayInfo)(nil),        // 1: service.PlayInfo
	(*DynamicPlayInfo)(nil), // 2: service.DynamicPlayInfo
	(*BaseMeta)(nil),        // 3: service.BaseMeta
	(*VideoInfo)(nil),       // 4: service.VideoInfo
	(*FallBackAPI)(nil),     // 5: service.FallBackAPI
	(*DynamicVideo)(nil),    // 6: service.DynamicVideo
	(*Video)(nil),           // 7: service.Video
	(*Audio)(nil),           // 8: service.Audio
	(*VideoMeta)(nil),       // 9: service.VideoMeta
	(*AudioMeta)(nil),       // 10: service.AudioMeta
	(*EncryptInfo)(nil),     // 11: service.EncryptInfo
	(*P2PInfo)(nil),         // 12: service.P2PInfo
	(*BaseRangeInfo)(nil),   // 13: service.BaseRangeInfo
	(*BarrageInfo)(nil),     // 14: service.BarrageInfo
	(*CheckInfo)(nil),       // 15: service.CheckInfo
	(*BigThumb)(nil),        // 16: service.BigThumb
	(*FitterInfo)(nil),      // 17: service.FitterInfo
	(*SeekOffSet)(nil),      // 18: service.SeekOffSet
	(*DNS)(nil),             // 19: service.DNS
	(*DNSInfo)(nil),         // 20: service.DNSInfo
	nil,                     // 21: service.DNSInfo.DnsInfoEntry
}
var file_video_model_proto_depIdxs = []int32{
	16, // 0: service.MetaDataInfo.thumbs:type_name -> service.BigThumb
	1,  // 1: service.MetaDataInfo.original_stream:type_name -> service.PlayInfo
	1,  // 2: service.MetaDataInfo.static_streams:type_name -> service.PlayInfo
	1,  // 3: service.MetaDataInfo.hls_streams:type_name -> service.PlayInfo
	2,  // 4: service.MetaDataInfo.dash_streams:type_name -> service.DynamicPlayInfo
	3,  // 5: service.PlayInfo.meta:type_name -> service.BaseMeta
	11, // 6: service.PlayInfo.encrypt_info:type_name -> service.EncryptInfo
	13, // 7: service.PlayInfo.base_range_info:type_name -> service.BaseRangeInfo
	15, // 8: service.PlayInfo.check_info:type_name -> service.CheckInfo
	1,  // 9: service.DynamicPlayInfo.dynamic_video_list:type_name -> service.PlayInfo
	1,  // 10: service.DynamicPlayInfo.dynamic_audio_list:type_name -> service.PlayInfo
	16, // 11: service.VideoInfo.big_thumbs:type_name -> service.BigThumb
	5,  // 12: service.VideoInfo.fallback_api:type_name -> service.FallBackAPI
	18, // 13: service.VideoInfo.seek_ts:type_name -> service.SeekOffSet
	20, // 14: service.VideoInfo.dns_info:type_name -> service.DNSInfo
	7,  // 15: service.VideoInfo.video_list:type_name -> service.Video
	6,  // 16: service.VideoInfo.dynamic_video:type_name -> service.DynamicVideo
	7,  // 17: service.DynamicVideo.dynamic_video_list:type_name -> service.Video
	8,  // 18: service.DynamicVideo.dynamic_audio_list:type_name -> service.Audio
	9,  // 19: service.Video.video_meta:type_name -> service.VideoMeta
	11, // 20: service.Video.encrypt_info:type_name -> service.EncryptInfo
	13, // 21: service.Video.base_range_info:type_name -> service.BaseRangeInfo
	12, // 22: service.Video.p2p_info:type_name -> service.P2PInfo
	15, // 23: service.Video.check_info:type_name -> service.CheckInfo
	14, // 24: service.Video.barrage_info:type_name -> service.BarrageInfo
	17, // 25: service.Video.fitter_info:type_name -> service.FitterInfo
	10, // 26: service.Audio.audio_meta:type_name -> service.AudioMeta
	11, // 27: service.Audio.encrypt_info:type_name -> service.EncryptInfo
	13, // 28: service.Audio.base_range_info:type_name -> service.BaseRangeInfo
	12, // 29: service.Audio.p2p_info:type_name -> service.P2PInfo
	15, // 30: service.Audio.check_info:type_name -> service.CheckInfo
	17, // 31: service.Audio.fitter_info:type_name -> service.FitterInfo
	21, // 32: service.DNSInfo.dns_info:type_name -> service.DNSInfo.DnsInfoEntry
	19, // 33: service.DNSInfo.DnsInfoEntry.value:type_name -> service.DNS
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_video_model_proto_init() }
func file_video_model_proto_init() {
	if File_video_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaDataInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPlayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallBackAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarrageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigThumb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FitterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekOffSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_model_proto_goTypes,
		DependencyIndexes: file_video_model_proto_depIdxs,
		MessageInfos:      file_video_model_proto_msgTypes,
	}.Build()
	File_video_model_proto = out.File
	file_video_model_proto_rawDesc = nil
	file_video_model_proto_goTypes = nil
	file_video_model_proto_depIdxs = nil
}
